alert("Boas-vindas ao jogo do Número Secreto!"); //Exibe mensagem de alerta 
// Pode usar "", '' ou  ``, mas é boa prática manter a consistência no uso.
// ";" é opcional

let numeroSecreto = 4; //Declaração e inicialização ("valoração") de variável
console.log("numeroSecreto: "+ numeroSecreto); //Concatenação de string e variável

let chute = prompt("Digite um número de 1 a 10."); //Entrada de dados pelo usuário e armazenamento em variável

console.log(chute == numeroSecreto)

// Laço condicional Se
if (chute == numeroSecreto) /*Comparação*/ {
    // Comandos caso condição verdadeira
    // console.log("Isso aí! Você descobriu o número secreto (5)!"); //Imprime dado no console
    alert(`Isso aí! Você descobriu o número secreto (${numeroSecreto})!`); //Variáveis em Strings com Template Strings
    // Console é uma ferramenta para desenvolvimento, e não para usuários
} 
// Senão
else {
    // Comandos caso condição falsa
    alert(`Você errou. O número secreto era ${numeroSecreto}, mas você respondeu ${chute}. :()`);
}


###ERROR NOTEBOOK

Meu console só está mostrando false, por quê? console.log("Comparação dos valores" + chute == numeroSecreto);
O problema no seu código está na forma como a operação de comparação (`==`) está sendo avaliada. 

Aqui está o que está acontecendo:

1. A operação de adição (`+`) no JavaScript tem prioridade maior do que a operação de comparação (`==`).
2. O código `console.log("Comparação dos valores" + chute == numeroSecreto)` é interpretado assim:
   - Primeiro, `"Comparação dos valores" + chute` é avaliado, resultando em uma **string** (por exemplo, `"Comparação dos valores42"` se `chute` for `42`).
   - Em seguida, o JavaScript compara essa string resultante com o valor de `numeroSecreto` usando `==`.
   - Como uma string dificilmente será igual ao valor numérico de `numeroSecreto`, a comparação sempre resultará em `false`.

### Solução

Para resolver o problema, você pode usar parênteses para deixar claro o que deseja avaliar antes da comparação:

```javascript
console.log("Comparação dos valores: " + (chute == numeroSecreto));
```

Neste caso:
1. O `chute == numeroSecreto` será avaliado primeiro.
2. O resultado (que será `true` ou `false`) será concatenado à string `"Comparação dos valores: "`.

Isso garantirá que a mensagem correta seja exibida no console. 

Por exemplo, se `chute` for `42` e `numeroSecreto` também for `42`, o console exibirá:

```
Comparação dos valores: true
```


while -> enquanto -> laço de repetição - enquanto algo estiver ocorrendo / for verdadeiro execute
-> Repete um bloco de códigos enquanto uma determinada condição for verdadeira. Precisa de uma condição que possa ser insatisfeita em determinado momento, ou será um loop infinito.
Loops infinitos podem ser usados em programas de microcontroladores que não possuem estruturas de repetição contínua como void loop, por exemplo. Ex.: Utilizar while(1) -> sempre verdadeiro -> loop infinito.

!=  ->  diferente

++ -> incrementar 1
-- -> decrementar 1

&& -> Operador AND -> verdadeiro se todas as expressões forem verdadeiras
|| -> Operador OR -> verdadeiro se alguma das expressões for verdadeira
! -> Operador NOT -> verdadeiro se a expressão for falsa, e vice-versa.


==	Igual	A == B	Verdadeiro se A for igual a B
!=	Diferente	A != B	Verdadeiro se A não for igual a B
<	Menor que	A < B	Verdadeiro se A for menor que B
>	Maior que	A > B	Verdadeiro se A for maior que B
<=	Menor ou igual	A <= B	Verdadeiro se A for menor ou igual a B.
>=	Maior ou igual	A >= B	Verdadeiro se A for maior ou igual a B.

&&	E / AND	(A > B) && (B == C)	Verdadeiro se A fo maior que B E B for igual a C
ǀǀ	OU / OR	(A > B) ǀǀ (B == C)	Verdadeiro se A for maior que B OU B for igual a C
!	NEGAÇÃO	!(A == B)	Verdadeiro se A NÃO for igual a B

Operador ternário: condicional simplificado
condicao ? comandoCasoVerdade : comandoCasoFalso

O operador ternário é usado no mercado.

Math.random(); retorna um número entre 0 e 1, incluindo 0 e não 1.
parseInt -> converte um valor para inteiro

parseInt(Math.random() * 10);
Multiplica o número gerado pelo Math.random por 10, a fim de gerar um número de um algarismo (não decimal) e converte para inteiro (retira a parte decimal)
-> gera números de 0 a 9

parseInt(Math.random() * 10 + 1);
-> gera números de 1 a 10

Para gerar um número entre 1 e 3, podemos usar o código: let numeroAleatorio1a3 = parseInt(Math.random() * 3) + 1;.


let numeroAleatorio1a3 = parseInt(Math.random() * 3) + 1;.
-> O código acima gera um número aleatório inteiro entre 1 e 3, ambos inclusivos. Portanto, os números possíveis que podem ser gerados por esse código são: 1, 2 e 3.